# docker.yaml
---
- name: Docker engine installation
  hosts: all
  become: true
  tasks:
    - name: Add Docker GPG key
      apt_key:
        url: "{{ docker_gpg_key_url }}"
        state: present

    - name: Add Docker APT repository
      apt_repository:
        repo: "{{ docker_apt_repo }}"
        state: present

    - name: Update apt packages
      apt:
        update_cache: false

    - name: Install docker essential packages
      apt:
        name: "{{ apt_packages }}"
        state: present

    - name: Check if SSH key pair exists
      stat:
        path: ~/.ssh/id_rsa.pub
      become: false
      register: key_stat

    - name: Generate SSH key pair without passphrase
      command: ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -N ''
      when: key_stat.stat.exists == false
      become: false

    - name: Fetch remote id_rsa.pub
      fetch:
        src: "/home/{{ ansible_user }}/.ssh/id_rsa.pub"
        dest: "./tmp/{{ ansible_hostname }}/key.pub"
        flat: yes
      when: key_stat.stat.exists == false

    - name: Add SSH key to GitHub
      uri:
        url: "https://api.github.com/user/keys"
        method: POST
        body_format: json
        body:
          title: "Ansible: {{ ansible_user }}@{{ ansible_hostname }}"
          key: "{{ lookup('file', './tmp/{{ ansible_hostname }}/key.pub') }}"
        headers:
          Authorization: "token {{ github_token }}"
        status_code: 201
      register: result
      when: key_stat.stat.exists == false

    - name: Ensure the existence of the Docker folder
      ansible.builtin.file:
        path: "{{ docker_remote_path }}"
        state: directory

    - name: Add current user to the Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
        state: present

    - name: Run Docker login command
      command: echo "{{ github_token }} | docker_login ghcr.io --username {{ docker_username }} --password-stdin"
      become: false

    - name: Clone the repository
      ansible.builtin.git:
        repo: "{{ repository_url }}"
        dest: "{{ repository_folder_dest }}"
        version: "{{ repository_branch }}"
        force: true
      environment:
        GIT_SSH_COMMAND: "ssh -i {{ repository_private_key }} -o StrictHostKeyChecking=no"
      register: webserver_clone_result

    - name: Check if .env file exists
      ansible.builtin.stat:
        path: "{{ repository_folder_dest }}/.env"
      register: env_file_stat

    - name: Create .env file
      ansible.builtin.copy:
        content: |
          # Mariadb environment
          MYSQL_ROOT_PASSWORD={{ database_root_password }}
          MYSQL_USER=sysadmin
          MYSQL_PASSWORD={{ database_user_password }}
          # Openlitespeed environment
          TimeZone=Asia/Jakarta
          DOMAIN=localhost
        dest: "{{ repository_folder_dest }}/.env"
      when: env_file_stat.stat.exists == false

    - name: Run Docker Compose
      ansible.builtin.docker_compose:
        project_src: "{{ repository_folder_dest }}"
        project_name: "{{ repository_name }}"
        state: present
      register: webserver_compose_result

    - name: 5 secs of delay added waiting for webserver up
      pause:
        seconds: 5

    - name: Check if the server is reachable
      uri:
        url: "http://{{ ansible_host }}:7080"
        method: GET
        return_content: no
      register: webserver_get_result
